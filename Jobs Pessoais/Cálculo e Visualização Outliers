import pandas as pd
import numpy as np
import plotly.express as px
import matplotlib.pyplot as plt
import datetime
from datetime import timedelta, date, datetime
import warnings
import seaborn as sns
import os
from collections import defaultdict
warnings.filterwarnings('ignore')

# # Ajustar as configurações de exibição
# pd.set_option('display.max_columns', None)
# pd.set_option('display.max_rows', None)
# pd.set_option('display.max_colwidth', None)

hoje = str(date.today().strftime('%d-%m-%Y'))
ontem = datetime.now() - timedelta(1)
ontem = str(ontem.strftime('%d-%m-%Y'))

# Assumindo que 'data' é seu conjunto de dados e 'column_name' é a coluna que você deseja analisar
dados  = pd.read_excel(f'C:\\.xlsx')
df = pd.DataFrame (dados)
df = df.drop([0, 0], axis=0)

#Caso a planilha venha com o Cabeçalho Mesclado em duas células
df.columns = df.columns.str.strip()
df.columns = [col.replace('\n', ' ') for col in df.columns]
df.dropna(axis=0, inplace=True, thresh=4)
df.dropna(axis=1, how='all', inplace=True)

#Verificando a primeira entrada do arquivo após os Drops
print(df.iloc[:1])

# Calcular quartis e IQR
Q1 = df ['Coluna'].quantile(0.25)
Q3 = df ['Coluna'].quantile(0.75)
IQR = Q3 - Q1

# Defina um limite para detecção de anomalias (por exemplo, 1,5 vezes IQR)
limite_inferior = Q1 - 1.5 * IQR
limite_superior = Q3 + 1.5 * IQR

# Identificar anomalias
anomalias = df[(df['Coluna'] < limite_inferior) | (df['Coluna'] > limite_superior)]

# Plote os valores
plt.figure(figsize=(10, 6))
plt.plot(df['Coluna'], label='Data Values', marker='o', linestyle='-', color='blue')

# df = px.data.gapminder().query(["Coluna"])

fig = px.line(df, x="Coluna 1", y="Coluna", title="")
fig.add_hline(y=limite_superior)
fig.update_traces(mode="markers+lines", hovertemplate=None)
fig.update_layout(hovermode="x")

fig.show()

# Destacar anomalias no gráfico
plt.scatter(anomalias.index, anomalias['Coluna 1'], color='red', label='Anomalias')

# Criar a linha de Limite Superior e Inferior tracejado
plt.axhline(y=limite_inferior, color='green', linestyle='--', label='Banda Inferior')
plt.axhline(y=limite_superior, color='orange', linestyle='--', label='Banda Superior')

# Set labels and title
plt.xlabel('Data Point Index')
plt.ylabel('Valores')
plt.title('Detecção de Anomalias Com IQR')
plt.legend()

# Show the plot
plt.show()

# Imprima as anomalias
print ("Anomalias:" )
print (anomalias)
